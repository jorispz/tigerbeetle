diff --git a/lib/std/Build/Step/Compile.zig b/lib/std/Build/Step/Compile.zig
index 335a7e2df..62ff05172 100644
--- a/lib/std/Build/Step/Compile.zig
+++ b/lib/std/Build/Step/Compile.zig
@@ -99,6 +99,7 @@ image_base: ?u64 = null,
 libc_file: ?LazyPath = null,
 
 valgrind_support: ?bool = null,
+trace_pc_guard: ?bool = null,
 each_lib_rpath: ?bool = null,
 /// On ELF targets, this will emit a link section called ".note.gnu.build-id"
 /// which can be used to coordinate a stripped binary with its debug symbols.
@@ -1913,6 +1914,7 @@ fn make(step: *Step, prog_node: *std.Progress.Node) !void {
         }
     }
 
+    try addFlag(&zig_args, "trace-pc-guard", self.trace_pc_guard);
     try addFlag(&zig_args, "valgrind", self.valgrind_support);
     try addFlag(&zig_args, "each-lib-rpath", self.each_lib_rpath);
 
diff --git a/src/Compilation.zig b/src/Compilation.zig
index a08c3e09f..44af73137 100644
--- a/src/Compilation.zig
+++ b/src/Compilation.zig
@@ -533,6 +533,7 @@ pub const InitOptions = struct {
     want_red_zone: ?bool = null,
     omit_frame_pointer: ?bool = null,
     want_valgrind: ?bool = null,
+    want_trace_pc_guard: ?bool = null,
     want_tsan: ?bool = null,
     want_compiler_rt: ?bool = null,
     want_lto: ?bool = null,
@@ -796,6 +797,7 @@ pub fn create(gpa: Allocator, options: InitOptions) !*Compilation {
         else
             options.cache_mode;
 
+        const trace_pc_guard = options.want_trace_pc_guard orelse false;
         const tsan = options.want_tsan orelse false;
         // TSAN is implemented in C++ so it requires linking libc++.
         const link_libcpp = options.link_libcpp or tsan;
@@ -1091,6 +1093,7 @@ pub fn create(gpa: Allocator, options: InitOptions) !*Compilation {
         cache.hash.add(pie);
         cache.hash.add(lto);
         cache.hash.add(unwind_tables);
+        cache.hash.add(trace_pc_guard);
         cache.hash.add(tsan);
         cache.hash.add(stack_check);
         cache.hash.add(stack_protector);
@@ -1529,6 +1532,7 @@ pub fn create(gpa: Allocator, options: InitOptions) !*Compilation {
             .pie = pie,
             .lto = lto,
             .valgrind = valgrind,
+            .trace_pc_guard = trace_pc_guard,
             .tsan = tsan,
             .stack_check = stack_check,
             .stack_protector = stack_protector,
@@ -2297,6 +2301,7 @@ fn addNonIncrementalStuffToCacheManifest(comp: *Compilation, man: *Cache.Manifes
 
         // Synchronize with other matching comments: ZigOnlyHashStuff
         man.hash.add(comp.bin_file.options.valgrind);
+        man.hash.add(comp.bin_file.options.trace_pc_guard);
         man.hash.add(comp.bin_file.options.single_threaded);
         man.hash.add(comp.bin_file.options.use_llvm);
         man.hash.add(comp.bin_file.options.dll_export_fns);
@@ -4432,6 +4437,10 @@ pub fn addCCArgs(
                 try argv.append("-fsanitize=thread");
             }
 
+            if (comp.bin_file.options.trace_pc_guard) {
+                try argv.append("-fsanitize-coverage=trace-pc-guard");
+            }
+
             if (comp.bin_file.options.red_zone) {
                 try argv.append("-mred-zone");
             } else if (target_util.hasRedZone(target)) {
diff --git a/src/codegen/llvm.zig b/src/codegen/llvm.zig
index 3104ea702..e58f3cd8c 100644
--- a/src/codegen/llvm.zig
+++ b/src/codegen/llvm.zig
@@ -1243,6 +1243,7 @@ pub const Object = struct {
                 comp.bin_file.options.optimize_mode == .Debug,
                 comp.bin_file.options.optimize_mode == .ReleaseSmall,
                 comp.time_report,
+                comp.bin_file.options.trace_pc_guard,
                 comp.bin_file.options.tsan,
                 comp.bin_file.options.lto,
                 null,
@@ -1267,6 +1268,7 @@ pub const Object = struct {
             comp.bin_file.options.optimize_mode == .Debug,
             comp.bin_file.options.optimize_mode == .ReleaseSmall,
             comp.time_report,
+            comp.bin_file.options.trace_pc_guard,
             comp.bin_file.options.tsan,
             comp.bin_file.options.lto,
             emit_asm_path,
diff --git a/src/codegen/llvm/bindings.zig b/src/codegen/llvm/bindings.zig
index 73473e2d4..390ca74be 100644
--- a/src/codegen/llvm/bindings.zig
+++ b/src/codegen/llvm/bindings.zig
@@ -1179,6 +1179,7 @@ pub const TargetMachine = opaque {
         is_debug: bool,
         is_small: bool,
         time_report: bool,
+        trace_pc_guard: bool,
         tsan: bool,
         lto: bool,
         asm_filename: ?[*:0]const u8,
diff --git a/src/libcxx.zig b/src/libcxx.zig
index 07967ec69..fd3e97d55 100644
--- a/src/libcxx.zig
+++ b/src/libcxx.zig
@@ -235,6 +235,7 @@ pub fn buildLibCXX(comp: *Compilation, prog_node: *std.Progress.Node) !void {
         .want_red_zone = comp.bin_file.options.red_zone,
         .omit_frame_pointer = comp.bin_file.options.omit_frame_pointer,
         .want_valgrind = false,
+        .want_trace_pc_guard = comp.bin_file.options.trace_pc_guard,
         .want_tsan = comp.bin_file.options.tsan,
         .want_pic = comp.bin_file.options.pic,
         .want_pie = comp.bin_file.options.pie,
@@ -396,6 +397,7 @@ pub fn buildLibCXXABI(comp: *Compilation, prog_node: *std.Progress.Node) !void {
         .want_red_zone = comp.bin_file.options.red_zone,
         .omit_frame_pointer = comp.bin_file.options.omit_frame_pointer,
         .want_valgrind = false,
+        .want_trace_pc_guard = comp.bin_file.options.trace_pc_guard,
         .want_tsan = comp.bin_file.options.tsan,
         .want_pic = comp.bin_file.options.pic,
         .want_pie = comp.bin_file.options.pie,
diff --git a/src/link.zig b/src/link.zig
index 2fea01ff8..28e9355ab 100644
--- a/src/link.zig
+++ b/src/link.zig
@@ -176,6 +176,7 @@ pub const Options = struct {
     pie: bool,
     lto: bool,
     valgrind: bool,
+    trace_pc_guard: bool,
     tsan: bool,
     stack_check: bool,
     red_zone: bool,
diff --git a/src/main.zig b/src/main.zig
index 456886c91..d58bdad9f 100644
--- a/src/main.zig
+++ b/src/main.zig
@@ -430,6 +430,8 @@ const usage_build_generic =
     \\  -fno-sanitize-c           Disable C undefined behavior detection in safe builds
     \\  -fvalgrind                Include valgrind client requests in release builds
     \\  -fno-valgrind             Omit valgrind client requests in debug builds
+    \\  -ftrace-pc-guard          TODO See LLVM SanitizerCoverage docs
+    \\  -fno-trace-pc-guard       TODO See LLVM SanitizerCoverage docs
     \\  -fsanitize-thread         Enable Thread Sanitizer
     \\  -fno-sanitize-thread      Disable Thread Sanitizer
     \\  -fdll-export-fns          Mark exported functions as DLL exports (Windows)
@@ -822,6 +824,7 @@ fn buildOutputType(
     var want_red_zone: ?bool = null;
     var omit_frame_pointer: ?bool = null;
     var want_valgrind: ?bool = null;
+    var want_trace_pc_guard: ?bool = null;
     var want_tsan: ?bool = null;
     var want_compiler_rt: ?bool = null;
     var rdynamic: bool = false;
@@ -1294,6 +1297,10 @@ fn buildOutputType(
                         want_valgrind = true;
                     } else if (mem.eql(u8, arg, "-fno-valgrind")) {
                         want_valgrind = false;
+                    } else if (mem.eql(u8, arg, "-ftrace-pc-guard")) {
+                        want_trace_pc_guard = true;
+                    } else if (mem.eql(u8, arg, "-fno-trace-pc-guard")) {
+                        want_trace_pc_guard = false;
                     } else if (mem.eql(u8, arg, "-fsanitize-thread")) {
                         want_tsan = true;
                     } else if (mem.eql(u8, arg, "-fno-sanitize-thread")) {
@@ -3349,6 +3356,7 @@ fn buildOutputType(
         .stack_report = stack_report,
         .is_test = arg_mode == .zig_test,
         .each_lib_rpath = each_lib_rpath,
+        .want_trace_pc_guard = want_trace_pc_guard,
         .build_id = build_id,
         .test_evented_io = test_evented_io,
         .test_filter = test_filter,
diff --git a/src/zig_llvm.cpp b/src/zig_llvm.cpp
index d22bfc1b4..b21e8a813 100644
--- a/src/zig_llvm.cpp
+++ b/src/zig_llvm.cpp
@@ -59,6 +59,7 @@
 #include <llvm/Transforms/IPO.h>
 #include <llvm/Transforms/IPO/AlwaysInliner.h>
 #include <llvm/Transforms/IPO/PassManagerBuilder.h>
+#include <llvm/Transforms/Instrumentation/SanitizerCoverage.h>
 #include <llvm/Transforms/Instrumentation/ThreadSanitizer.h>
 #include <llvm/Transforms/Scalar.h>
 #include <llvm/Transforms/Utils.h>
@@ -156,6 +157,7 @@ LLVMTargetMachineRef ZigLLVMCreateTargetMachine(LLVMTargetRef T, const char *Tri
     }
 
     TargetOptions opt;
+    opt.UseInitArray = true;
 
     opt.FunctionSections = function_sections;
     switch (float_abi) {
@@ -226,7 +228,7 @@ struct TimeTracerRAII {
 
 bool ZigLLVMTargetMachineEmitToFile(LLVMTargetMachineRef targ_machine_ref, LLVMModuleRef module_ref,
         char **error_message, bool is_debug,
-        bool is_small, bool time_report, bool tsan, bool lto,
+        bool is_small, bool time_report, bool trace_pc_guard, bool tsan, bool lto,
         const char *asm_filename, const char *bin_filename,
         const char *llvm_ir_filename, const char *bitcode_filename)
 {
@@ -339,6 +341,16 @@ bool ZigLLVMTargetMachineEmitToFile(LLVMTargetMachineRef targ_machine_ref, LLVMM
         });
     }
 
+    if (trace_pc_guard) {
+      pass_builder.registerOptimizerLastEPCallback(
+        [](ModulePassManager &module_pm, OptimizationLevel level) {
+          SanitizerCoverageOptions options;
+          options.CoverageType = SanitizerCoverageOptions::SCK_Edge;
+          options.TracePCGuard = true;
+          module_pm.addPass(SanitizerCoveragePass(options));
+        });
+    }
+
     // Thread sanitizer
     if (tsan) {
         pass_builder.registerOptimizerLastEPCallback([](ModulePassManager &module_pm, OptimizationLevel level) {
diff --git a/src/zig_llvm.h b/src/zig_llvm.h
index 74dcd1056..0f66b1e1e 100644
--- a/src/zig_llvm.h
+++ b/src/zig_llvm.h
@@ -52,7 +52,7 @@ ZIG_EXTERN_C char *ZigLLVMGetNativeFeatures(void);
 
 ZIG_EXTERN_C bool ZigLLVMTargetMachineEmitToFile(LLVMTargetMachineRef targ_machine_ref, LLVMModuleRef module_ref,
         char **error_message, bool is_debug,
-        bool is_small, bool time_report, bool tsan, bool lto,
+        bool is_small, bool time_report, bool trace_pc_guard, bool tsan, bool lto,
         const char *asm_filename, const char *bin_filename,
         const char *llvm_ir_filename, const char *bitcode_filename);
 
